import pandas as pd
configfile: "configs/config_main.yaml"

# initial bamfiles from previous pipeline
input_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/genome/bamFileSort"
# intermediate outputs
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/genome/variantCalling"
# final path
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/genome"


samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']



# def checkQC(qsfile):
#     with open(qsfile,'r') as f:
#         fstrip = f.read().strip()
#         lastline = fstrip.split("\n")[-1]
#
#         qscore = int(lastline.split()[0])
#
#         return qscore

# TODO - add DNA compatibility
rule all:
    input:
        vcfFiltered = expand(final_path + "/variantCalling/vcfFiltered/{sample}.variant_filtered.vcf.gz",sample=samples)

# rule qualityScore:
#     input:
#         bam = input_path + "/{sample}.sort.bam"
#     output:
#         qscores = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.txt",
#         chartscores = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.pdf"
#     shell:
#         "picard QualityScoreDistribution INPUT={input.bam} OUTPUT={output.qscores} CHART={output.chartscores}"

# rule addReadGroups:
#     input:
#         bamSort = input_path + "/{sample}.sort.bam"
#     output:
#         bamSortAdd = intermediate_path + "/bamFileSortAdd/{sample}.sort_add.bam"
#     shell:
#         "picard AddOrReplaceReadGroups INPUT={input.bamSort} OUTPUT={output.bamSortAdd} SO=coordinate "
#         "RGID=Label RGLB=Label RGPL=illumina RGPU=Label RGSM=Label"

rule markDuplicated:
    input:
        bamSort = input_path + "/{sample}.sort.bam"
    output:
        bamMarked = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.bam",
        bamMarkedMetrics = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.metrics"
    shell:
        "picard MarkDuplicates INPUT={input.bamSort} OUTPUT={output.bamMarked} " 
        "M={output.bamMarkedMetrics} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT"


rule reorderSam:
    input:
        bamMarked = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.bam",
        dictionary = config["DICTIONARY"]
    output:
        bamResorted = intermediate_path + "/bamFileResorted/{sample}.resorted_mdup.bam"
    shell:
        "picard ReorderSam INPUT={input.bamMarked} OUTPUT={output.bamResorted} SEQUENCE_DICTIONARY={input.dictionary}"

rule splitNCigar:
    input:
        bamResorted = intermediate_path + "/bamFileResorted/{sample}.resorted_mdup.bam",
        genome = config["GENOME"],
        #qscore = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.txt"
    output:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam"
    shell:
        "gatk SplitNCigarReads -R {input.genome} -I {input.bamResorted} -O {output.bamSplitN}"


rule baseRecalibration:
    input:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam",
        genome = config["GENOME"],
        dbSNP = config["DB_SNP"]
    output:
        recalData = intermediate_path + "/recalData/{sample}.recal_data.table"
    shell:
        "gatk BaseRecalibrator -I {input.bamSplitN} -O {output.recalData} -R {input.genome} "
        "--use-original-qualities --known-sites {input.dbSNP}"

rule applyBQSR:
    input:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam",
        recalData = intermediate_path + "/recalData/{sample}.recal_data.table",
        genome = config["GENOME"]
    output:
        bamRecal = intermediate_path + "/bamFileRecal/{sample}.sorted_recal.bam"
    shell:
        "gatk ApplyBQSR --add-output-sam-program-record -R {input.genome} -I {input.bamSplitN} --use-original-qualities "
        "-O {output.bamRecal} --bqsr-recal-file {input.recalData}"
    
    
rule variantCalling:
    input:
        bamRecal = intermediate_path + "/bamFileRecal/{sample}.sorted_recal.bam",
        genome = config["GENOME"]
    output:
        vcf = final_path + "/variantCalling/vcfFile/{sample}_all.vcf.gz"
    shell:
        "gatk HaplotypeCaller -R {input.genome} -I {input.bamRecal} -O {output.vcf} -dont-use-soft-clipped-bases "
        "--standard-min-confidence-threshold-for-calling 20"

rule variantFiltration:
    input:
        vcf = final_path + "/variantCalling/vcfFile/{sample}_all.vcf.gz",
        genome = config["GENOME"]
    output:
        vcfFiltered = final_path + "/variantCalling/vcfFiltered/{sample}.variant_filtered.vcf.gz"
    shell:
        "gatk VariantFiltration -R {input.genome} -V {input.vcf} -window 35 -cluster 3 "
        "--filter-name 'FS' -filter 'FS > 30.0' --filter-name 'QD' -filter 'QD < 2.0' -O {output.vcfFiltered}"
