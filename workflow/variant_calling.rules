import pandas as pd
configfile: "configs/config_main.yaml"


output_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/genome/variantCalling"
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/genome"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']


final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/genome"
alignmentQC = config["alignmentQC"]

def checkQC(qsfile):
    with open(qsfile,'r') as f:
        fstrip = f.read().strip()
        lastline = fstrip.split("\n")[-1]

        qscore = int(lastline.split()[0])

        return qscore

# TODO - add DNA compatibility
rule all:
    input:
        vcf = final_path + "/vcfFile/{sample}_all.vcf"

rule qualityScore:
    input:
        bam = intermediate_path + "/bamFile/{sample}.bam"
    output:
        qscores = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.txt",
        chartscores = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.pdf"
    shell:
        "picard QualityScoreDistribution INPUT={input.bam} OUTPUT={output.qscores} CHART={output.chartscores}"

rule addReadGroups:
    input:
        bamSort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
    output:
        bamSortAdd = intermediate_path + "/bamFileSortAdd/{sample}.sort_add.bam"
    shell:
        "picard AddOrReplaceReadGroups INPUT={input.bamSort} OUTPUT={output.bamSortAdd} SO=coordinate "
        "RGID=Label RGLB=Label RGPL=illumina RGPU=Label RGSM=Label"

rule markDuplicated:
    input:
        bamSortAdd = intermediate_path + "/bamFileSortAdd/{sample}.sort_add.bam"
    output:
        bamMarked = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.bam",
        bamMarkedMetrics = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.metrics"
    shell:
        "picard MarkDuplicates INPUT={input.bamSortAdd} OUTPUT={output.bamMarked} " 
        "M={output.bamMarkedMetrics} CREATE_INDEX=true"


rule reorderSam:
    input:
        bamMarked = intermediate_path + "/bamFileMarked/{sample}.sort_add_mdup.bam",
        dictionary = config["DICTIONARY"]
    output:
        bamResorted = intermediate_path + "/bamFileResorted/{sample}.resorted_mdup.bam"
    shell:
        "picard ReorderSam INPUT={input.bamMarked} OUTPUT={output.bamResorted} SEQUENCE_DICTIONARY={input.dictionary}"

# TODO - check splitncigar parameters
rule splitNCigar:
    input:
        bamResorted = intermediate_path + "/bamFileResorted/{sample}.resorted_mdup.bam",
        genome = config["GENOME"],
        qscore = final_path + "/alignmentQC/{sample}_PICARDqc/qualityscores.txt"
    output:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam"
    run:
        if checkQC(input.qscore) >= 59:
            shell("gatk SplitNCigarReads -R {input.genome} -I {input.bamResorted} -O {output.bamSplitN}")
        else:
            shell("gatk SplitNCigarReads -R {input.genome} -I {input.bamResorted} -O {output.bamSplitN}")


rule baseRecalibration:
    input:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam",
        genome = config["GENOME"],
        dbSNP = config["DB_SNP"]
    output:
        recalData = intermediate_path + "/recalData/{sample}.recal_data.table"
    shell:
        "gatk BaseRecalibrator -I {input.bamSplitN} -O {output.recalData} -R {input.genome} "
        "--known-sites {input.dbSNP} --disable-sequence-dictionary-validation true"

rule applyBQSR:
    input:
        bamSplitN = intermediate_path + "/bamFileSplitN/{sample}.sorted_split.bam",
        recalData = intermediate_path + "/recalData/{sample}.recal_data.table"
    output:
        bamRecal = final_path + "/bamFileRecal/{sample}.sorted_recal.bam"
    shell:
        "gatk ApplyBQSR -I {input.bamSplitN} -O {output.bamRecal} -bqsr {input.recalData}"
    
    
rule variantCalling:
    input:
        bamRecal = final_path + "/bamFileRecal/{sample}.sorted_recal.bam",
        genome = config["GENOME"]
    output:
        vcf = final_path + "/vcfFile/{sample}_all.vcf"
    shell:
        "gatk HaplotypeCaller -R {input.genome} -I {input.bamRecal} -O {output.vcf}"



